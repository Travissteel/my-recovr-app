version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: recovr-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-recovr_db}
      POSTGRES_USER: ${DB_USER:-recovr_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-recovr_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./server/database/chatbot-schema.sql:/docker-entrypoint-initdb.d/02-chatbot-schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-recovr_user}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - recovr-network

  # Redis (Optional - for rate limiting and caching)
  redis:
    image: redis:7-alpine
    container_name: recovr-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - recovr-network

  # RecovR Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recovr-app
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://${DB_USER:-recovr_user}:${DB_PASSWORD:-recovr_password}@postgres:5432/${DB_NAME:-recovr_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - AI_CHATBOT_ENABLED=${AI_CHATBOT_ENABLED:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CHAT_ENCRYPTION_KEY=${CHAT_ENCRYPTION_KEY:-}
    ports:
      - "${PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - recovr-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: recovr-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - recovr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  recovr-network:
    driver: bridge